import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { faker } from '@faker-js/faker';

const photosApi = createApi({
    reducerPath: 'photos',
    baseQuery: fetchBaseQuery({
        baseUrl: 'http://localhost:3005'
    }),
    endpoints(builder) {
        //Add in configuration for the 3 different endpoints. We add a query function to each object that we return from the endpoints function. This query function is going to be called to customize
        //the request that Redux Toolkit Query makes for us.

        return {
            //making a big assumption here that when we run the fetchPhotos query we are going to provide an album object to it and that's the album we want to fetch the photos for. Now when we 
            //make use of the hook that is generated by this query function, we will have to pass in an album object to it.
            fetchPhotos: builder.query({
                providesTags: (result, error, album) => {
                    //album or arg is whatever we pass to the query function when we call it.
                    const tags = result.map((photo) => {
                        return { type: 'Photo', id: photo.id };
                    });
                    //add in to the end of the tags array the tag that identifies the album that we fetched the photos for.
                    tags.push({ type: 'AlbumPhoto', id: album.id });
                    return tags;
                },
                query: (album) => {
                    return {
                        url: '/photos',
                        params: {
                            //params object is used to find the query string in the url. 
                            //need to reference the id of some album in the params object since we will be fetching the photos for a particular album.
                            albumId: album.id
                        },
                        method: 'GET',
                    };
                }
            }),
            //Goal is to add a photo to an album. We need to know which album we are adding the photo to. We need to know the url of the photo that we want to add to the album.
            addPhoto: builder.mutation({
                invalidatesTags: (result, error, album) => {
                    return [{ type: 'AlbumPhoto', id: album.id }]
                },
                query: (album) => {
                    //assuming that when we run this mutation function we will provide an album object to it and that's the album we want to add the photo to.
                    return {//add in query function and return an object that describes the request that we want to make to the server.
                        method: 'POST',
                        url: '/photos',//the url of some image hosted online. We will use the url of the image that we want to add to the album. 
                        body: {
                            albumId: album.id,
                            //We need to know which album we are creating the photo for. We need to pass in the album object as an argument to the query function.
                            url: faker.image.url(150, 150, true),//calling this function will give us a url path to some random image hosted online
                        },

                    };
                }
            }),
            removePhoto: builder.mutation({
                invalidatesTags: (result, error, photo) => {
                    //the value flowing into our endpoint is the photo object that we want to delete. 
                    return [{ type: 'Photo', id: photo.id }];
                },
                query: (photo) => {
                    return {
                        method: 'DELETE',
                        url: `/photos/${photo.id}`,//put in some photo id here. Assuming that a photo object we want to delete will be provided to this mutation function by the component that calls it. Whenever 
                        //we execute the function that gets returned from calling this mutation's automatically generated hook, we will provide a photo object to it.
                    };
                }
            }),
        };
    }
});

export const { useFetchPhotosQuery, useAddPhotoMutation, useRemovePhotoMutation } = photosApi;//exporting the automatically generated hooks that Redux Toolkit Query creates for us that all
//come from the photosApi object. We can import these hooks into our components and use them to fetch photos, add photos, and remove photos from the server.

export { photosApi };//exporting the photosApi object so we can import it into the store index.js file and add it to the configureStore function.